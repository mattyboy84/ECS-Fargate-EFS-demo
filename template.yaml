AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  vpcCIDR:
    Type: String
    Description: cidr block for the vpc
    Default: 10.35.0.0/16
  scalingGroupDesiredSize:
    Type: String
    Default: "1"
  efsMountPoint:
    Type: String
    Description: The directory that the EFS is mounted to
    Default: /mnt/efs
  
Resources:
  ECSTaskExecutionRole: # Role used by the container to make AWS API calls on the user's behalf
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-ECSTaskExecutionRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
  
  ECSTaskRole: # Role that allows containers in the make to make API requests to AWS Services
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-ECSTaskRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-role-policy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "ssm:GetParameter"
                Resource:
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/*"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
        - "arn:aws:iam::aws:policy/AmazonElasticFileSystemClientFullAccess"
  
  instanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-instanceRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
        - "arn:aws:iam::aws:policy/AmazonElasticFileSystemClientFullAccess"
  
  instanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: !Sub "${AWS::StackName}-profile"
      Path: /
      Roles: 
        - !Ref instanceRole
  
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-InternetGateway"
  
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref EFSvpc
  
  networkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref EFSvpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-networkAcl"
  
  ACLInboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref networkAcl
      RuleNumber: 100
      Egress: false # outgoing
      Protocol: -1 # according to this list https://en.wikipedia.org/wiki/List_of_IP_protocol_numbers
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
  
  ACLOutboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref networkAcl
      RuleNumber: 100
      Egress: true # outgoing
      Protocol: -1 # according to this list https://en.wikipedia.org/wiki/List_of_IP_protocol_numbers
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
  
  subnetANetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref subnetA
      NetworkAclId: !Ref networkAcl
  
  subnetBNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref subnetB
      NetworkAclId: !Ref networkAcl
  
  subnetCNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref subnetC
      NetworkAclId: !Ref networkAcl
  
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref EFSvpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PublicRouteTable"
  
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable
    DependsOn:
      - VPCGatewayAttachment
  
  subnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref subnetA
  
  subnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref subnetB
  
  subnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref subnetC
  
  EFSvpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref vpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-VPC"
  
  subnetA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Select [0, !Cidr [ !GetAtt EFSvpc.CidrBlock, 3, 8 ]]
      AvailabilityZone: !Select [0, Fn::GetAZs: !Ref "AWS::Region"]
      VpcId: !Ref EFSvpc
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-subnetA"
  
  subnetB:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Select [1, !Cidr [ !GetAtt EFSvpc.CidrBlock, 3, 8 ]]
      AvailabilityZone: !Select [1, Fn::GetAZs: !Ref "AWS::Region"]
      VpcId: !Ref EFSvpc
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-subnetB"
  
  subnetC:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Select [2, !Cidr [ !GetAtt EFSvpc.CidrBlock, 3, 8 ]]
      AvailabilityZone: !Select [2, Fn::GetAZs: !Ref "AWS::Region"]
      VpcId: !Ref EFSvpc
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-subnetC"
  
  instanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupName: !Sub "${AWS::StackName}-SecurityGroup"
      GroupDescription: !Sub "${AWS::StackName}-SecurityGroup description"
      VpcId: !Ref EFSvpc
      SecurityGroupIngress:
        - IpProtocol: tcp #SSH
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - FromPort: 80 #HTTP
          ToPort: 80
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - FromPort: 443 #HTTPS
          ToPort: 443
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-instanceSecurityGroup"
  
  efsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupName: !Sub "${AWS::StackName}-efsSecurityGroup"
      GroupDescription: !Sub "${AWS::StackName}-efsSecurityGroup description"
      VpcId: !Ref EFSvpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-efsSecurityGroup"
  
  instanceTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "${AWS::StackName}-instanceTemplate"
      VersionDescription: "1.0.0"
      LaunchTemplateData:
        ImageId: ami-084e8c05825742534
        InstanceType: t2.micro
        CreditSpecification:
          CpuCredits: standard
        DisableApiTermination: false # true = cannot shutdown via console, api or cli
        EbsOptimized: false # EBS I/O optimized
        InstanceInitiatedShutdownBehavior: stop # what to do when told to 'shutdown'
        Monitoring:
          Enabled: true
        IamInstanceProfile:
          Arn: !GetAtt instanceProfile.Arn
        SecurityGroupIds:
          - !Ref instanceSecurityGroup
        MetadataOptions:
          HttpEndpoint: enabled # curl http://169.254.169.254/latest/meta-data/
          InstanceMetadataTags: enabled
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
        
            sudo yum -y update

            sudo yum install -y httpd.x86_64
            sudo systemctl start httpd.service
            sudo systemctl enable httpd.service
            sudo echo “Hello World from $(hostname -f)” > /var/www/html/index.html

            ########################################################################

            sudo mkdir ${efsMountPoint}
            echo "${elasticFileSystem}.efs.${AWS::Region}.amazonaws.com:/    ${efsMountPoint}   nfs4    defaults" >> /etc/fstab
            sudo mount -a
            #sudo touch "${efsMountPoint}/$(hostname -f).txt"
  
  bastionInstance:
    Type: AWS::EC2::Instance
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref instanceTemplate
        Version: !GetAtt instanceTemplate.LatestVersionNumber
      SubnetId: !Ref subnetA
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-bastionInstance"
  
  elasticFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
     # AvailabilityZoneName: String
      BackupPolicy:
        Status: DISABLED
      BypassPolicyLockoutSafetyCheck: false #default is false
      Encrypted: true
      LifecyclePolicies:
        - TransitionToIA: AFTER_30_DAYS # After x days of not accessing a file, move to IA
        - TransitionToPrimaryStorageClass: AFTER_1_ACCESS # move from IA to standard after 1 access to a file
      PerformanceMode: generalPurpose # Can be: generalPurpose | maxIO
      ThroughputMode: elastic  # Can be: bursting | elastic | provisioned
      #ProvisionedThroughputInMibps: Double # Required if ThroughputMode is set to provisioned - Can be: 1-3414
      FileSystemTags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-elasticFileSystem"
  
  # These expose the EFS to these subnets.
  # Without these you get: Failed to resolve server fs-123.efs.region.amazonaws.com: Name or service not known
  mountTargetA:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref elasticFileSystem
      SubnetId: !Ref subnetA
      SecurityGroups:
        - !Ref efsSecurityGroup
  
  mountTargetB:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref elasticFileSystem
      SubnetId: !Ref subnetB
      SecurityGroups:
        - !Ref efsSecurityGroup
  
  mountTargetC:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref elasticFileSystem
      SubnetId: !Ref subnetC
      SecurityGroups:
        - !Ref efsSecurityGroup
  
  cluster:
    Type: AWS::ECS::Cluster
    Properties: 
      ClusterName: !Sub "${AWS::StackName}-cluster"
      ServiceConnectDefaults:
        Namespace: !Sub "${AWS::StackName}-cluster"
      CapacityProviders:
        - FARGATE
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Configuration:
         ExecuteCommandConfiguration:
            Logging: DEFAULT
  
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "${AWS::StackName}-TaskDefinition"
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      NetworkMode: awsvpc # awsvpc is required for ECS tasks on Fargate
      RequiresCompatibilities:
        - FARGATE
      Cpu: "512" # 0.5vCPU
      Memory: "1024" # 1 GB
      EphemeralStorage:
        SizeInGiB: 21 # min is 21, max is 200
      RuntimePlatform:
        CpuArchitecture: X86_64
        OperatingSystemFamily: LINUX
      Volumes:
        - Name: EFS-mount
          EFSVolumeConfiguration:
            FilesystemId: !Ref elasticFileSystem
            RootDirectory: /
            TransitEncryption: ENABLED
            AuthorizationConfig:
              IAM: ENABLED
      ContainerDefinitions:
        - Name: !Sub "${AWS::StackName}-container"
          Image: amazonlinux:2
          Essential: true
          Command:
            - "/bin/bash"
            - "-c"
            - !Sub |
              yum -y update
              yum install -y httpd.x86_64
              yum install -y jq

              echo "Hello World from $(curl $ECS_CONTAINER_METADATA_URI/task | jq -r '.Containers[0].Networks[0].IPv4Addresses[0]')" > /var/www/html/index.html
              
              mkdir ${efsMountPoint}
              touch "${efsMountPoint}/$(curl $ECS_CONTAINER_METADATA_URI/task | jq -r '.Containers[0].Networks[0].IPv4Addresses[0]').txt"

              httpd -D FOREGROUND
          MountPoints:
            - ContainerPath: /mnt/efs
              SourceVolume: EFS-mount # The name of the Volume in the task def to mount to this container
          PortMappings:
            - ContainerPort: 80
              HostPort: 80
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref "AWS::Region"
              awslogs-group: !Ref containerLogs
              awslogs-stream-prefix: "prefix"
  
  containerLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', [/aws/ecs/, !Ref cluster]]
  
  service:
    Type: AWS::ECS::Service
    Properties:
      LaunchType: FARGATE
      TaskDefinition: !Ref TaskDefinition
      Cluster: !GetAtt cluster.Arn
      ServiceName: !Sub "${AWS::StackName}-test-service"
      DesiredCount: !Ref scalingGroupDesiredSize
      PlatformVersion: "1.4.0"
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
        DeploymentCircuitBreaker:
          Enable: false
          Rollback: false
      DeploymentController:
        Type: ECS
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref instanceSecurityGroup
          Subnets:
            - !Ref subnetA
            - !Ref subnetB
            - !Ref subnetC
      EnableExecuteCommand: true

